跳表查询时间复杂度：O(logn)，更具体一些是2*O(logn)；
怎么避免跳表退化：随机函数，插入底层数据链表的同时，同时随机插入索引层；
布隆过滤器：
    当一个元素被加入集合时，通过K个Hash函数将这个元素映射成一个位阵列（Bit array）中的K个点，把它们置为1；
    检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它；
    值得注意的是：如果这些点有任何一个0，则被检索元素一定不在；如果都是1，则被检索元素很可能在
红黑树
    1）根节点是黑色的，叶节点是不存储数据的黑色空节点；
    2）任意两个相邻的节点不能同时为红色；
    3）任意节点到其可到达的叶节点间包含相同数量的黑色节点；
链表总长度为n，那么跳表的层数可以设置为logn + 1，这样可以保证在logn时间复杂度查询到元素；
跳表四个操作：after、before、below、above；
跳表查询，判断查找值是否大于等于当前节点下一个节点，如果满足往前走，否则往下走；
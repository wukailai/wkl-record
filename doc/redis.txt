SETNX：当且仅当key不存在时，把key的值设置为value，key如果存在，不做任何操作返回0；
GETSET：key设置为新值并返回旧值；
EXPIRE：为key设置过期时间；
redis实现分布式锁逻辑：
    private boolean lock(String lockKey) {
        long expires = System.currentTimeMillis() + expireTime;
        String expiresStr = String.valueOf(expires);
        // 如果当前锁不存在，返回加锁成功
        if (jedis.setnx(lockKey, expiresStr) == 1) {
            return true;
        }
        // 如果锁存在，获取锁的过期时间
        String currentValueStr = jedis.get(lockKey);
        if (currentValueStr != null && Long.parseLong(currentValueStr) < System.currentTimeMillis()) {
            // 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间
            String oldValueStr = jedis.getSet(lockKey, expiresStr);
            if (oldValueStr != null && oldValueStr.equals(currentValueStr)) {
                // 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁
                return true;
            }
        }
        // 其他情况，一律返回加锁失败
        return false;
    }
redis执行lua脚本是一个原子操作；
redis快速恢复：master-slave+哨兵模式，恢复好坏取决于提升master的延迟
哨兵（一组哨兵节点，一台机器去检测并不准确，需要多节点同时去检测（节点数为奇数），保证可靠性）：对redis实例进行监控、通知、自动故障转移；
哨兵工作流程：状态感知、心跳检测、选举哨兵领导者、选举新的master、故障恢复、客户端感知新master；
主观下线：一个哨兵节点发送心跳消息在规定时间范围内没有响应；客观下线：一组哨兵共同判断某个节点在规定时间范围内没有响应；
选举哨兵领导者，哨兵领导者发起并负责故障恢复；
从slave选举master优先级：slave-priority配置（数值越小越优先） -> 数据完整性 -> runid较小者进行选择；
redis的zset是一个有序集合，每一个元素(member)都关联了一个score,通过score排序来取集合中的值；
Redis不能确保key在指定时间被删除；
Redis过期监听：超时失效key的监听触发，可用于实现延时事件；
Redis实例默认建立了16个db，Redis集群下只有db0，不支持多db；
Redis持久化机制：
    1）AOF（写后日志，命令执行完成，数据写入内存，记录日志，日志的格式是执行成功的命令，主线程写）日志；
        a）always，命令执行完成，立马将日志写入磁盘，影响主线程；
        b）everysec，命令执行完成，日志先写入内存缓冲区，每隔一秒内存写入磁盘；
        c）No，命令执行完成，日志先写入内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘；
        重写机制：创建一个新的AOF日志文件，原理：多条日志合成一条，解决AOF文件大的问题，重写由后台子线程完成，主线程会拷贝内存数据到子线程；
        缺点：单线程，恢复速度慢；
    2）RDB快照；内存快照
        a）一次性把全部数据写入磁盘势必造成线程阻塞，使用bgsave（子线程写）代替save（主线程写）可以避免主线程阻塞；
        b）采用copy on write（数据被修改就立马复制一个副本一起写入RDB）解决全量快照时数据发生变化的情况；
        c）增量快照（做了一次全量快照后后面仅对修改的记录做快照）解决多久做一次快照的问题；
    3）AOF和RDB结合：内存快照以一定的频率执行，两次快照之间AOF记录所有命令；
SETNX：当且仅当key不存在时，把key的值设置为value，key如果存在，不做任何操作返回0；
GETSET：key设置为新值并返回旧值；
EXPIRE：为key设置过期时间；
redis实现分布式锁逻辑：
    private boolean lock(String lockKey) {
        long expires = System.currentTimeMillis() + expireTime;
        String expiresStr = String.valueOf(expires);
        // 如果当前锁不存在，返回加锁成功
        if (jedis.setnx(lockKey, expiresStr) == 1) {
            return true;
        }
        // 如果锁存在，获取锁的过期时间
        String currentValueStr = jedis.get(lockKey);
        if (currentValueStr != null && Long.parseLong(currentValueStr) < System.currentTimeMillis()) {
            // 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间
            String oldValueStr = jedis.getSet(lockKey, expiresStr);
            if (oldValueStr != null && oldValueStr.equals(currentValueStr)) {
                // 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁
                return true;
            }
        }
        // 其他情况，一律返回加锁失败
        return false;
    }
redis执行lua脚本是一个原子操作；
redis getSet方法可以实现CAS；
redis快速恢复：master-slave+哨兵模式，恢复好坏取决于提升master的延迟
哨兵（一组哨兵节点，一台机器去检测并不准确，需要多节点同时去检测（节点数为奇数），保证可靠性）：对redis实例进行监控、通知、自动故障转移；
哨兵工作流程：状态感知、心跳检测、选举哨兵领导者、选举新的master、故障恢复、客户端感知新master；
主观下线：一个哨兵节点发送心跳消息在规定时间范围内没有响应；客观下线：一组哨兵共同判断某个节点在规定时间范围内没有响应；
选举哨兵领导者，哨兵领导者发起并负责故障恢复；
从slave选举master优先级：slave-priority配置（数值越小越优先） -> 数据完整性 -> runid较小者进行选择；
redis的zset是一个有序集合，每一个元素(member)都关联了一个score,通过score排序来取集合中的值；
Redis不能确保key在指定时间被删除；
Redis过期监听：超时失效key的监听触发，可用于实现延时事件；
Redis实例默认建立了16个db，Redis集群下只有db0，不支持多db；
Redis持久化机制：
    1）AOF（写后日志，命令执行完成，数据写入内存，记录日志，日志的格式是执行成功的命令，主线程写）日志；
        a）always，命令执行完成，立马将日志写入磁盘，影响主线程；
        b）everysec，命令执行完成，日志先写入内存缓冲区，每隔一秒内存写入磁盘；
        c）No，命令执行完成，日志先写入内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘；
        重写机制：创建一个新的AOF日志文件，原理：多条日志合成一条，解决AOF文件大的问题，重写由后台子线程完成，主线程会拷贝内存数据到子线程；
        缺点：单线程，恢复速度慢；
    2）RDB快照；内存快照
        a）一次性把全部数据写入磁盘势必造成线程阻塞，使用bgsave（子线程写）代替save（主线程写）可以避免主线程阻塞；
        b）采用copy on write（数据被修改就立马复制一个副本一起写入RDB）解决全量快照时数据发生变化的情况；
        c）增量快照（做了一次全量快照后后面仅对修改的记录做快照）解决多久做一次快照的问题；
    3）AOF和RDB结合：内存快照以一定的频率执行，两次快照之间AOF记录所有命令；
redis快的原因：1）纯内存操作；2）单线程，没有线程切换开销；3）非阻塞的I/O多路复用机制；
redis数据类型：
    1）String，一般做一些复杂的计数功能的缓存；
    2）hash，存放结构化对象；
    3）list，实现简单的消息队列；
    4）set，全局去重；
    5）sorted set，实现排行榜；
删除策略：
    1）定时删除，定时器，到点删除；
    2）定期删除，每隔一段时间随机检查部分key是否过期；
    3）惰性删除；
删除选择：
    1）lru，全量数据集和已设置过期时间的数据集；
    2）将要过期的数据，已设置过期时间的数据集；
    3）随机，全量数据集和已设置过期时间的数据集；
    4）禁止删除数据，新写入数据会报错；
master最好不要做任何持久化操作；
redis保证多命令原子性实现方式：采用lua脚本；
redis单线程：一个线程处理所有的网络请求；
redis主从复制：
    1）全量同步：slave初始化阶段，slave向master发送SYNC命令，master执行BGSAVE命令生成RDB文件并记录所有写命令到缓存，RDB同步+缓存写命令同步；
    2）增量同步：slave正常工作后，主服务器每执行一个写命令就会向从服务器发送相同的写命令；
redis大key解决方案：
    1）读写超时；
    2）删除或者自动过期时，出现qps突降或者突升的情况，极端情况下，会造成主从复制异常；
redis大key解决方案：
    1）单个value很大：
        a）如果整取，分拆成多个key-value，用multiGet获取值，业务层做合并；
        b）对象拆分存入hash；
    2）集合（hash、set、zset、list）元素过多：
        a）rehash，newHashKey=hashKey + (hash(field) % 10000）；
redis事务实现：multi开始事务，exec执行事务；
redis string底层数据结构：动态字符串；
redis list底层数据结构：链表；
redis zset底层数据结构：跳表或者ziplist（数量小于128）；
redis hash底层数据结构：压缩列表（ziplist，数据量较小、数量较小时采用）或者hashtable；
redis set底层数据结构：intset或者hashtable；
redis管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应；
redis热key：
    1）jvm二级缓存；
    2）热key备份，key在多个redis上都存一份不就好了，减小单台服务器压力；
redis zset底层跳表不同点？
redis lru具体实现？
rdb持久化：fork子进程定时执行，写入二进制文件，属于快照数据，RDB可能会丢数据；
redis列表实现消息队列
    1）阻塞方式：blPop/brPop阻塞式读取第一个/最后一个元素；
    2）非阻塞方式：lPop/rPop非阻塞式读取第一个/最后一个元素；
    3）Push替代Pop，添加元素；
redis实现并发变量修改：
    1）incr、incrby（可指定相加数量）；
    2）decr（可保证秒杀系统不超卖）、decrby（可指定相减数量）；
redis QPS：100000（可借助redis实现库存锁定，库存定时刷新到实体表中）；
mysql QPS：1000；
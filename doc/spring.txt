spring的controller默认是单例的，所以尽量不要使用非静态成员变量，也正因为单例，所以线程不安全；
spring controller单例变多例实现：添加@Scope("prototype")；
spring controller想使用线程私有变量解决方案：使用ThreadLocal；
spring bean作用域枚举：1）singleton；2）prototype；3）request；4）session；5）global session；
@EnableScheduling和@Scheduled注解实现定时任务，也可以通过SchedulingConfigurer接口来实现定时任务；
动态实现增删启停定时任务--Quartz框架；
spring validate支持分组检验（groups={xx.class}，方法层也标注@Validated(UserDTO.xx.class)，xx为DTO接口方法）：不同的方法接收相同的DTO，校验规则也不一样；
@ExceptionHandler：可以用来通过一处理方法抛出来的异常；
可以通过命令行、启动Application加注解的方式改变默认配置文件配置；
Spring框架的事务基础架构代码将默认地只在抛出Error或者unchecked exceptions时才标识事务回滚；
@Transactional：使用在具体的类上，而不是接口上；
spring boot优点：
    1）快速入门；
    2）提供默认配置简化项目配置；
    3）内嵌式容器简化Web项目；
    4）没有冗余代码生成和XML配置的要求；
@SpringBootApplication=@Configuration & @EnableAutoConfiguration & @ComponentScan只能扫描启动类同包或子包的Bean；
Spring如何实现AOP？
AnnotationAwareAspectJAutoProxyCreator是AOP核心处理类
AnnotationAwareAspectJAutoProxyCreator实现了BeanProcessor，其中postProcessAfterInitialization是核心方法；
核心实现分为2步：
    1）getAdvicesAndAdvisorsForBean获取当前bean匹配的增强器；
    2）createProxy为当前bean创建代理；
getAdvicesAndAdvisorsForBean核心逻辑如下：
    a. 找所有增强器，也就是所有@Aspect注解的Bean；
    b. 找匹配的增强器，也就是根据@Before，@After等注解上的表达式，与当前bean进行匹配，暴露匹配上的；
    c. 对匹配的增强器进行扩展和排序，就是按照@Order或者PriorityOrdered的getOrder的数据值进行排序，越小的越靠前；
createProxy有2种创建方法，JDK代理或CGLIB：
    a. 如果设置了proxyTargetClass=true，一定是CGLIB代理；
    b. 如果proxyTargetClass=false，目标对象实现了接口，走JDK代理；
    c. 如果没有实现接口，走CGLIB代理；
SpringContext：在初始化应用上下文时就实例化所有单实例的Bean；
BeanFactory：BeanFactory在初始化容器时，并未实例化Bean；

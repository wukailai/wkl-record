spring的controller默认是单例的，所以尽量不要使用非静态成员变量，也正因为单例，所以线程不安全；
spring controller单例变多例实现：添加@Scope("prototype")；
spring controller想使用线程私有变量解决方案：使用ThreadLocal；
spring bean作用域枚举：1）singleton；2）prototype；3）request；4）session；5）global session；
@EnableScheduling和@Scheduled注解实现定时任务，也可以通过SchedulingConfigurer接口来实现定时任务；
动态实现增删启停定时任务--Quartz框架；
spring validate支持分组检验（groups={xx.class}，方法层也标注@Validated(UserDTO.xx.class)，xx为DTO接口方法）：不同的方法接收相同的DTO，校验规则也不一样；
@ExceptionHandler：可以用来通过一处理方法抛出来的异常；
可以通过命令行、启动Application加注解的方式改变默认配置文件配置；
Spring框架的事务基础架构代码将默认地只在抛出Error或者unchecked exceptions时才标识事务回滚；
@Transactional：使用在具体的类上，而不是接口上；
spring boot优点：
    1）快速入门；
    2）提供默认配置简化项目配置；
    3）内嵌式容器简化Web项目；
    4）没有冗余代码生成和XML配置的要求；
@SpringBootApplication=@Configuration & @EnableAutoConfiguration & @ComponentScan只能扫描启动类同包或子包的Bean；
Spring如何实现AOP？
AnnotationAwareAspectJAutoProxyCreator是AOP核心处理类
AnnotationAwareAspectJAutoProxyCreator实现了BeanProcessor，其中postProcessAfterInitialization是核心方法；
核心实现分为2步：
    1）getAdvicesAndAdvisorsForBean获取当前bean匹配的增强器；
    2）createProxy为当前bean创建代理；
getAdvicesAndAdvisorsForBean核心逻辑如下：
    a. 找所有增强器，也就是所有@Aspect注解的Bean；
    b. 找匹配的增强器，也就是根据@Before，@After等注解上的表达式，与当前bean进行匹配，暴露匹配上的；
    c. 对匹配的增强器进行扩展和排序，就是按照@Order或者PriorityOrdered的getOrder的数据值进行排序，越小的越靠前；
createProxy有2种创建方法，JDK代理或CGLIB：
    a. 如果设置了proxyTargetClass=true，一定是CGLIB代理；
    b. 如果proxyTargetClass=false，目标对象实现了接口，走JDK代理；
    c. 如果没有实现接口，走CGLIB代理；
SpringContext：在初始化应用上下文时就实例化所有单实例的Bean；
BeanFactory：BeanFactory在初始化容器时，并未实例化Bean；
Aspect：声明注解类；
Pointcut：定义切点；
@before、@After：通知注解；
ResponseBodyAdvice接口：controller返回增强统一处理接口；
循环依赖（只有单例对象才有）不能解决的场景：依赖全为构造器注入；
spring中对象的实例化是通过反射实现的；
spring解决循环依赖：实例化一个bean的时候，首先递归地实例化其所依赖的所有bean，直到某个bean没有依赖其他bean，如果属性依赖的bean实例已创建好则注入属性；
spring实例化一个bean分两步：实例化目标bean+注入属性；
三级缓存：
    一级缓存：存储所有创建好的单例bean；
    二级缓存：完成实例化但没完成属性注入及初始化的对象；
    三级缓存：单例对象工厂，产出二级缓存中的对象；
当A、B两个类发生循环引用时，在A完成实例化后，就使用实例化后的对象去创建一个对象工厂，添加到三级缓存中，如果A被AOP代理，
那么通过这个工厂获取到的就是A代理后的对象，如果A没有被AOP代理，那么这个工厂获取到的就是A实例化的对象；
spring重试策略：@Retryable；
BeanFactory使用时创建Bean，ApplicationContext启动时创建所有的Bean；
SpringBootApplication：
    SpringBootConfiguration
        Configuration
    EnableAutoConfiguration
    ComponentScan
aop三种模式：运行时织入、编译时织入、类加载时织入；
aop三种模式：运行时织入、编译时织入、类加载时织入；
常见的ioc容器实现类：ClassPathXmlApplicationContext、AnnotationConfigApplicationContext；
@Import(A.class、ImportSelector的实现类.class（批量注册）、ImportBeanDefinitionRegistry实现类.class（手动注册）)修饰在Configure类上面，直接向ioc容器注册组件；
使用FactoryBean（实现了getObject方法）实现类注册对象，实际上注册的是getObject返回的对象；
@ComponentScan:在Configure类里面定义扫描范围（扫描范围：@Controller、@Service、@Component、@Repository）；
@scope定义作用范围：singleton（默认）、prototype、request、session；
@Conditional选择性将组件注入ioc容器；
scope如果设置为singleton，ioc容器（AnnotationConfigApplicationContext）启动时创建对象；
scope如果设置为singleton，如果指定@Lazy，ioc容器（AnnotationConfigApplicationContext）获取对象时创建对象；
scope如果设置为prototype，ioc容器（AnnotationConfigApplicationContext）获取对象时创建对象；
BeanDefinitionRegistry：所有的类都在这个类里面定义；
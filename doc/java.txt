join：等待调用方执行完：主线程中调用t.join，主线程会等待t线程先执行完；
注解不能被继承的；
CompletableFuture实现了CompletionStage接口（代表一个特定的计算阶段）和Future接口；
CompletableFuture cf = CompletableFuture.runAsync(() -> {
        do something;（没有传executor参数的情况下，使用守护线程去执行任务）
});
or
CompletableFuture cf = CompletableFuture.runAsync(() -> {
        do something;
}, executor);
CompletableFuture方法：thenAccept、thenApply、thenApplyAsync、thenAccept（接收前一个阶段返回结果，返回类型void）等；
CompletableFuture的cancel不是使用中断去取消操作；
java使用StringBuilder对String中间的相连操作做了优化：每次会创建StringBuilder并将StringBuilder转化为String；
Integer java类有一个私有变量IntegerCache，缓存了-128到127所有的整数对象，所有Integer a = 100, b = 100, a == b返回true，但是
a = 1000, b = 1000, a == b返回false。Integer a = 100 <=> Integer a = Integer.valueOf(100),valueOf函数会用到缓存，目的是减少内存占用；
通过反射获取变量值：
    1）Field field = class.getDeclaredField("name");
    2）Integer value = (Integer) field.get(如果是静态变量，既可以传object，也可以传class，如果是非静态变量只能传object)；
>>>：高位统统补0；>>：正数高位补0，负数高位补1；
1.8版本的HashMap查找的时候需要判断链表类型，Node还是TreeNode(Node的子类)；
Function.apply(参数)执行方法操作；例子：Function function = Integer::parseInt int i = function.apply("123");
Optional处理null方式：如果对象为空，返回一个单例空Optional对象；
java.lang.OutOfMemoryError: unable to create new native thread：线程数过多，线程占用的是非JVM内存，
    1）在总内存一定的情况下，减小JVM内存分配可以解决这个问题；
    2）XSS参数调整单个线程占用内存大小；
大对象：由-XX:PretenureSizeThreshold启动参数控制，若对象大小大于此值，就会绕过新生代，直接在老年代中分配；
stream优势：并行stream（非线程安全）具有效率优势；
GBK：英文一个字符，中文两个字符（如果在中文网站，选择GBK可以节省空间）；
UTF-8：1-4个字符；
迭代器模式（实现Iterator接口）：提供一种方法访问一个容器对象中各个元素，而又不需暴露该对象的内部细节；
synchronize（每个对象都有一个monitor）锁重的原因：在JVM中monitorenter和monitorexit字节码依赖于底层的操作系统的Mutex Lock来实现的，
但是由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价是非常昂贵的；
flatMap方法会让给你把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流；
java hashmap高低位异或运算的原因：让高低每一位都参与运算，减少碰撞；
雪花算法原理：时间戳+机器Id+序列号（同一时间（毫秒粒度），序列号累加）；
幂等性实现：逻辑设计（血缘倒入）、前置条件判断（游戏领奖）；
双边check注意点：instance需要用volatile修饰；
cpu高可能的原因：
    1）死循环；
    2）频繁的GC，特别是full GC；
    3）慢查询、大事务；
    4）高CPU操作频繁；
DelayQueue是一个BlockingQueue（无界阻塞）队列，队列元素实现Delayed接口，它本质就是封装了一个PriorityQueue（优先队列），在向DelayQueue队列中添加元素时，
会给元素一个Delay（延迟时间）作为排序条件，队列中最小的元素会优先放在队首，队列中的元素只有到了Delay时间才允许从队列中取出；
set、list转数组：
    Integer[] arr = set.toArray(new Integer[set.size()])  --正确
    int[] arr = set.toArray(new int[set.size()])  --错误
    原因：java范型不支持基础类型；
copyOnWrite：写的时候复制一份，写完引用指向新对象，这样不会阻塞读操作，写操作会通过ReentrantLock加锁；
LinkedList：底层双向链表；
CountDownLatch做减法，CyclicBarrier做加法；
java阻塞队列API：
    方法\处理方式	    抛出异常	    返回特殊值	  一直阻塞	   超时退出
    插入方法	        add(e)	    offer(e)	  put(e)	   offer(e,time,unit)
    移除方法	        remove()	poll()	      take()	   poll(time,unit)
    检查方法	        element()	peek()	      不可用	       不可用
synchronized和ReentrantLock区别：
    synchronized不可响应中断，非公平锁；
    ReentrantLock有响应中断的方法lockInterruptibly()，可以指定非公平锁和公平锁；
NIO：selector监控多个channel；
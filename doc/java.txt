join：等待调用方执行完；
注解不能被继承的；
CompletableFuture实现了CompletionStage接口（代表一个特定的计算阶段）和Future接口；
CompletableFuture cf = CompletableFuture.runAsync(() -> {
        do something;（没有传executor参数的情况下，使用守护线程去执行任务）
});
or
CompletableFuture cf = CompletableFuture.runAsync(() -> {
        do something;
}, executor);
CompletableFuture方法：thenAccept、thenApply、thenApplyAsync、thenAccept（接收前一个阶段返回结果，返回类型void）等；
CompletableFuture的cancel不是使用中断去取消操作；
java使用StringBuilder对String中间的相连操作做了优化：每次会创建StringBuilder并将StringBuilder转化为String；
Integer java类有一个私有变量IntegerCache，缓存了-128到127所有的整数对象，所有Integer a = 100, b = 100, a == b返回true，但是
a = 1000, b = 1000, a == b返回false。Integer a = 100 <=> Integer a = Integer.valueOf(100),valueOf函数会用到缓存，目的是减少内存占用；
通过反射获取变量值：
    1）Field field = class.getDeclaredField("name");
    2）Integer value = (Integer) field.get(如果是静态变量，既可以传object，也可以传class，如果是非静态变量只能传object)；
>>>：高位统统补0；>>：正数高位补0，负数高位补1；
1.8版本的HashMap查找的时候需要判断链表类型，Node还是TreeNode(Node的子类)；
Function.apply(参数)执行方法操作；例子：Function function = Integer::parseInt int i = function.apply("123");
Optional处理null方式：如果对象为空，返回一个单例空Optional对象；
java.lang.OutOfMemoryError: unable to create new native thread：线程数过多，线程占用的是非JVM内存，
    1）所有在总内存一定的情况下，减小JVM内存分配可以解决这个问题；
    2）XSS参数调整单个线程占用内存大小；
大对象：由-XX:PretenureSizeThreshold启动参数控制，若对象大小大于此值，就会绕过新生代，直接在老年代中分配；
stream优势：并行stream（非线程安全）具有效率优势；
GBK：英文一个字符，中文两个字符（如果在中文网站，选择GBK可以节省空间）；
UTF-8：1-4个字符；
迭代器模式（实现Iterator接口）：提供一种方法访问一个容器对象中各个元素，而又不需暴露该对象的内部细节；
